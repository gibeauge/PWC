package ca.pwc.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;


public class UnZip {

    public static void main(String[] args) {
        unZipIt("C:/TEMP/mm.zip", "C:/TEMP/zip_out");
    }
    
    public static int unZipIt(String zipFile, String outputFolder) {
        
        int result = 0;
        
        // Creates the output directory if it does not exists
        File folder = new File(outputFolder);
        if (!folder.exists()) {
            boolean isFolderCreated = folder.mkdir();
            if (!isFolderCreated) {
                return -1;
            }
        }
                
        FileInputStream fis = null;
        ZipInputStream zis = null;
        ZipEntry ze = null;
        FileOutputStream fos = null;
        try {
            // Get the zip file content
            fis = new FileInputStream(zipFile);
            zis = new ZipInputStream(fis);
           
            // Get the zipped file list entry
            ze = zis.getNextEntry();   
            while (ze != null) {
                
                String fileName = ze.getName();
                File newFile = new File(outputFolder + File.separator + fileName );
                
                // create all non exists folders
                // else you will hit FileNotFoundException for compressed folder
                new File(newFile.getParent()).mkdirs();
                
                fos = new FileOutputStream(newFile);             
                
                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }
     
                fos.close();                
                ze = zis.getNextEntry();
            }
            
        } catch (IOException ex) {
            result = -1;
                        
        } finally {
            try { fos.close(); } catch (IOException e) { }            
            try { zis.closeEntry(); zis.close(); } catch (IOException e) { }            
            try { fis.close(); } catch (IOException e) { }
        }
        
        return result;
    }
    
    
    private static byte[] buffer = new byte[8192];
}
